/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clasesia;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

/**
 *
 * @author Adiel
 */
public class Hamming extends javax.swing.JFrame {

    /**
     * Creates new form Hamming
     */
    int cantidad_puntos = 300;
    final int dimensiones = 2; //
    int cantidad_neuronas_ocultas = 4;
    double[][] puntos;
    double[][] W;
//    double epsilon;

    public Hamming() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 287, Short.MAX_VALUE)
        );

        jButton1.setText("Generar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("itera");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("itera 100 veces");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        inicializa();
        muestra();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        itera();
        muestra();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < 100; i++) {
            itera();
            muestra();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hamming().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    Random rnd = new Random();

    private void inicializa() {
//        int cantidad_puntos;
//        final int dimensiones = 2; // 
        int pos = 0;
        double disp = 0.2;
        puntos = new double[cantidad_puntos][dimensiones];
        for (int i = 0; i < cantidad_puntos / 2; i++) {
            puntos[pos][0] = clamp(0.25 + disp * rnd.nextGaussian(),0,1);
            puntos[pos++][1] = clamp(0.25 + disp * rnd.nextGaussian(),0,1);
        }
        for (int i = cantidad_puntos / 2; i < cantidad_puntos; i++) {
            puntos[pos][0] = clamp(0.75 + disp * rnd.nextGaussian(),0,1);
            puntos[pos++][1] = clamp(0.75 + disp * rnd.nextGaussian(),0,1);
        }
        W = new double[dimensiones][cantidad_neuronas_ocultas];

        for (int i = 0; i < dimensiones; i++) {
            for (int j = 0; j < cantidad_neuronas_ocultas; j++) {
                W[i][j] = rnd.nextDouble();
            }
        }

//        epsilon = rnd.nextDouble() * (1d / (cantidad_neuronas_ocultas - 1));
    }
    
    private double clamp(double x, double min, double max){
       return Math.min(Math.max(x, min), max);
    }

    private void muestra() {
        Graphics g = jPanel1.getGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        int r = 5;
        g.setColor(Color.red);
        for (int i = 0; i < cantidad_puntos; i++) {
            g.drawOval((int) (jPanel1.getWidth() * puntos[i][0]) - r, (int) (jPanel1.getHeight() * puntos[i][1]) - r, 2 * r, 2 * r);
        }
        g.setColor(Color.BLUE);
        for (int j = 0; j < cantidad_neuronas_ocultas; j++) {
            g.drawOval((int) (jPanel1.getWidth() * W[0][j]) - r, (int) (jPanel1.getHeight() * W[1][j]) - r, 2 * r, 2 * r);
        }
    }

    private void itera() {
        //int pos = 0;
        double alpha = 0.001;
        double mayor_suma = -1000000000;
        int indice_BMU = -1;

        for (int a = 0; a < cantidad_puntos; a++) {  // presento cada punto
            // calculo la BMU
            indice_BMU = -1;
            mayor_suma = -1000000000;
            for (int m = 0; m < cantidad_neuronas_ocultas; m++) {
                double suma = 0;
                
                for (int i = 0; i < dimensiones; i++) {
                    suma += W[i][m] * puntos[a][i];
                }
                if (suma > mayor_suma) {
                    mayor_suma = suma;
                    indice_BMU = m;
                }

            }
            // actualizando

//            for (int m = 0; m < cantidad_neuronas_ocultas; m++) {
            for (int i = 0; i < dimensiones; i++) {
//                    if (m == indice_BMU) {
                W[i][indice_BMU] += alpha * (puntos[a][i] - W[i][indice_BMU]);
//                    } else {
//                       // W[i][m] += -alpha * (puntos[a][i] - W[i][m]);
//                    }
            }
//            }

        }

    }
}
