package clasesia;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import clasesia.*;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

/**
 *
 * @author Adiel
 */
public class BackPropagation extends javax.swing.JFrame {

    /**
     * Creates new form PerceptronSimple
     */
    // utileria
    Random rnd = new Random(0);

    // variables
    private int cantidad_puntos = 4;
    private double[][] puntos = null;
    double[][] W, W_incremento_anterior; //  coeficientes a entrenar
    double[] B, B_incremento_anterior;
    int cantidad_neuronas_ocultas = 2;
    int[] clases;  // cero o uno en dependencia    
    double m, n; // coeficientes de la recta del plano optimo

    public BackPropagation() {
        initComponents();
        puntos = new double[cantidad_puntos][2];
        clases = new int[cantidad_puntos];
        inicializaWyPuntos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );

        jButton1.setText("Genera");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("itera 1 vez");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("itera 1000 veces");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton1)
                        .addGap(30, 30, 30)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        visualiza();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        itera();
        visualiza();
       // mostrarred();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < 30000; i++) {
            itera();
            visualiza();
          //  mostrarred();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BackPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BackPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BackPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BackPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BackPropagation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    double valoranterior = 10000000;

    private void itera() {

        //  AQUI EL ESTUDIANTE DEBE COMENTAR EL CODIGO EL CUAL SE PONDRA COMO TAREA
        int dimensiones = 2;
        double alpha = 1;
        double[][] w = W;
        double[][] w_incremento = new double[cantidad_neuronas_ocultas][dimensiones + 1];
        double[] B_incremento = new double[dimensiones + 1];
        int[] salida_deseada = clases.clone();
        double error = 0;
        double[] error_acumulado_en_capa_oculta = new double[cantidad_neuronas_ocultas];
        double momentum = 0.3;   // no esta implementado con momentum

        int cont = 0;
        for (int i = 0; i < cantidad_puntos; i++) {
            error_acumulado_en_capa_oculta = new double[cantidad_neuronas_ocultas];
            double[] patron = puntos[i];
            //CALCULO las salidas de la capa oculta
            double[] H = new double[cantidad_neuronas_ocultas];
            double y = 0;
            for (int j = 0; j < cantidad_neuronas_ocultas; j++) {
                //funcion de transferencia
                H[j] = W[j][dimensiones]; // sumo el bias
                for (int k = 0; k < dimensiones; k++) {
                    H[j] += W[j][k] * patron[k];
                }
                //funcion de activacion
                H[j] = sigm(H[j]);
            }
            //calculo la salida de la capa oculta
            y = B[cantidad_neuronas_ocultas];
            for (int j = 0; j < cantidad_neuronas_ocultas; j++) {
                y += B[j] * H[j];
            }
            y = sigm(y);

            mostrarsalida(patron, y, clases[i]);
            error += Math.pow(salida_deseada[i] - y, 2);

            // calcular el incremento de la cappa de salida
            for (int j = 0; j < cantidad_neuronas_ocultas; j++) {
                B_incremento[j] += alpha * (salida_deseada[i] - y) * (y) * (1 - y) * H[j];
                error_acumulado_en_capa_oculta[j] += alpha * (salida_deseada[i] - y) * (y) * (1 - y) * B[j];
            }
            B_incremento[cantidad_neuronas_ocultas] += alpha * (salida_deseada[i] - y) * (y) * (1 - y) * 1; // para el bias

            for (int m = 0; m < cantidad_neuronas_ocultas; m++) {
                for (int j = 0; j < dimensiones; j++) {
                    w_incremento[m][j] += error_acumulado_en_capa_oculta[m] * H[m] * (1 - H[m]) * puntos[i][j];
                }
                w_incremento[m][dimensiones] += error_acumulado_en_capa_oculta[m] * H[m] * (1 - H[m]) * 1;
            }
        }
        error /= cantidad_puntos;

        System.out.println("Error: " + error + "    " + ((valoranterior >= error) ? 1 : 0));
        valoranterior = error;
        //actualizo los pesos
        for (int i = 0; i < cantidad_neuronas_ocultas + 1; i++) {
             B[i] += B_incremento[i];
        }

        for (int i = 0; i < cantidad_neuronas_ocultas; i++) {
            for (int j = 0; j < dimensiones + 1; j++) {
                W[i][j] += w_incremento[i][j];
            }
        }
    }

    private void visualiza() {
        Graphics g = jPanel1.getGraphics();

        int alto = jPanel1.getHeight();
        int largo = jPanel1.getWidth();
        g.setColor(Color.white);
        g.fillRect(0, 0, largo, alto);
        int r = 5;

        // genero la linea divisoria
       /* int x1 = rnd.nextInt(alto);
         int x2 = rnd.nextInt(largo);
         int y1 = rnd.nextInt(alto);
         int y2 = rnd.nextInt(largo);
         m = (double) (y1 - y2) / (x1 - x2);
         n = y1 - m * x1;*/
        //se generan los puntos
        for (int i = 0; i < cantidad_puntos; i++) {
            // puntos[i][0] = rnd.nextInt(largo);
            // puntos[i][1] = rnd.nextInt(alto);
            // dibujando los puntos

            if ((puntos[i][1] < 0.5 && puntos[i][0] < 0.5) || (puntos[i][1] > 0.5 && puntos[i][0] > 0.5)) {
                g.setColor(Color.red);
            } else {
                g.setColor(Color.blue);
            }
            g.drawOval((int) (puntos[i][0] * largo) - r, (int) (puntos[i][1] * alto) - r, 2 * r, 2 * r);

            //  System.out.println(((W[0] * puntos[i][0] +W[1] * puntos[i][1]+ W[2])) +" "+ clases[i]+" gggggggggggg");
        }
        // dibujo la recta
        double x1 = 0;
        double x2 = 1; //jPanel1.getWidth();
        double y1 = n;
        double y2 = (m * x2 + n);

        // dibujar el hiperplano
        x1 = 0;
        x2 = 1; //jPanel1.getWidth();
        y1 = (-W[0][0] * x1 - W[0][2]) / W[0][1];
        y2 = (-W[0][0] * x2 - W[0][2]) / W[0][1];
        g.setColor(Color.black);
        g.drawLine((int) (x1 * largo), (int) (y1 * alto), (int) (x2 * largo), (int) (y2 * alto));

        // dibujar el hiperplano
        x1 = 0;
        x2 = 1; //jPanel1.getWidth();
        y1 = (-W[1][0] * x1 - W[1][2]) / W[1][1];
        y2 = (-W[1][0] * x2 - W[1][2]) / W[1][1];
        g.setColor(Color.black);
        g.drawLine((int) (x1 * largo), (int) (y1 * alto), (int) (x2 * largo), (int) (y2 * alto));

    }

    private void inicializaWyPuntos() {

        int dimensiones = 2;
        W = new double[cantidad_neuronas_ocultas][dimensiones + 1];
        B = new double[cantidad_neuronas_ocultas + 1];
        /* for (int i = 0; i < cantidad_neuronas_ocultas + 1; i++) {
         B[i] = rnd.nextDouble();// * 10 - 5;
         }*/
        B = new double[]{5, -5, 0.25};

        W_incremento_anterior = new double[cantidad_neuronas_ocultas][dimensiones + 1];
        B_incremento_anterior = new double[cantidad_neuronas_ocultas];

        W[0][0] = -1;
        W[0][1] = 1;
        W[0][2] = -0.35;

        W[1][0] = -1;
        W[1][1] = 1;
        W[1][2] = -0.3;

        int alto = jPanel1.getHeight();
        int largo = jPanel1.getWidth();

        int r = 5;

        puntos = new double[][]{{0.25, 0.25}, {0.25, 0.75}, {0.75, 0.25}, {0.75, 0.75}};
        clases = new int[]{0, 1, 1, 0};
    }

    private double sigm(double d) {
        return 1d / (1 + Math.exp(-d));
    }

    private void mostrarred() {
        System.out.println("B:--------------------------");
        for (double ds : B) {
            System.out.print(ds + " ");
        }
        System.out.println();
        System.out.println("W:--------------------------");
        for (double[] ds : W) {
            for (double ds2 : ds) {
                System.out.print(ds2 + " ");
            }
            System.out.println();
        }

        // dibujar el hiperplano
        double x1 = 0;
        double x2 = 1; //jPanel1.getWidth();
        double y1 = (-W[0][0] * x1 - W[0][2]) / W[0][1];
        double y2 = (-W[0][0] * x2 - W[0][2]) / W[0][1];
        System.out.println("m: "+(-W[0][0])/ W[0][1]);
        System.out.println("n: "+(-W[0][2])/ W[0][1]);
   
        x1 = 0;
        x2 = 1; 
        y1 = (-W[1][0] * x1 - W[1][2]) / W[1][1];
        y2 = (-W[1][0] * x2 - W[1][2]) / W[1][1];
        System.out.println("m: "+(-W[1][0])/ W[1][1]);
        System.out.println("n: "+(-W[1][2])/ W[1][1]);

        System.out.println("____________________________________________________________");
    }

    private void mostrarsalida(double[] patron, double y, int i) {
          System.out.println("salida "+patron[0]+" "+patron[1]+" "+y + " " +i);
    }
}
