/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clasesia;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

/**
 *
 * @author Adiel
 */
public class PerceptronSimple extends javax.swing.JFrame {

    /**
     * Creates new form PerceptronSimple
     */
    // utileria
    Random rnd = new Random(0);

    // variables
    private final int cantidad_puntos = 200;
    private double[][] puntos = null;
    double W[] = new double[3]; //  coeficientes a entrenar
    int[] clases;  // cero o uno en dependencia    
    double m, n; // coeficientes de la recta del plano optimo

    public PerceptronSimple() {
        initComponents();
        puntos = new double[cantidad_puntos][2];
        clases = new int[cantidad_puntos];
        inicializaWyPuntos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );

        jButton1.setText("Genera");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("itera 1 vez");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("itera 1000 veces");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Línea verde: es la línea óptima");

        jLabel2.setText("Línea negra: es la línea que se esta entrenando");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton1)
                        .addGap(30, 30, 30)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        visualiza();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        itera();
        visualiza();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < 15000; i++) {
            itera();
            visualiza();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PerceptronSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PerceptronSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PerceptronSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PerceptronSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PerceptronSimple().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void itera() {

        int dimensiones = 2;
        double alpha = 0.0001;
        double[] w = W;
        double[] w_incremento = new double[dimensiones + 1];
       
        int cont =0;
        
        //  este es el metodo a implementar por los estudiantes
        for (int i = 0; i < cantidad_puntos; i++) {
            //
            double y = w[2];//   sumo el bias
            for (int j = 0; j < dimensiones; j++) {
                y += w[j] * puntos[i][j];
            }
            y = (y > 0 ? 1 : 0);
            for (int j = 0; j < dimensiones; j++) {
                w_incremento[j] += (clases[i] - y) * alpha * puntos[i][j];
            }
            w_incremento[dimensiones] += (clases[i] - y) * alpha;
            cont += (clases[i] - y==0)?0:1;
        }
        //actualizo el w
        for (int i = 0; i < dimensiones + 1; i++) {
            w[i] += w_incremento[i];
        }
        
        System.out.println(cont);

    }

    private void visualiza() {
        Graphics g = jPanel1.getGraphics();

        int alto = jPanel1.getHeight();
        int largo = jPanel1.getWidth();
        g.setColor(Color.white);
        g.fillRect(0, 0, largo, alto);
        int r = 5;

        // genero la linea divisoria
       /* int x1 = rnd.nextInt(alto);
         int x2 = rnd.nextInt(largo);
         int y1 = rnd.nextInt(alto);
         int y2 = rnd.nextInt(largo);
         m = (double) (y1 - y2) / (x1 - x2);
         n = y1 - m * x1;*/
        //se generan los puntos
        for (int i = 0; i < cantidad_puntos; i++) {
            // puntos[i][0] = rnd.nextInt(largo);
            // puntos[i][1] = rnd.nextInt(alto);
            // dibujando los puntos

            if (puntos[i][1] - m * puntos[i][0] - n > 0) {
                g.setColor(Color.red);
            } else {
                g.setColor(Color.blue);
            }
            g.drawOval((int) (puntos[i][0] * largo) - r, (int) (puntos[i][1] * alto) - r, 2 * r, 2 * r);

          //  System.out.println(((W[0] * puntos[i][0] +W[1] * puntos[i][1]+ W[2])) +" "+ clases[i]+" gggggggggggg");
        }
        // dibujo la recta
        double x1 = 0;
        double x2 = 1; //jPanel1.getWidth();
        double y1 = n;
        double y2 = (m * x2 + n);
        g.setColor(Color.green);
        g.drawLine((int) (x1 * largo), (int) (y1 * alto), (int) (x2 * largo), (int) (y2 * alto));

        // dibujar el hiperplano
        x1 = 0;
        x2 = 1; //jPanel1.getWidth();
        y1 = (-W[0] * x1 - W[2]) / W[1];
        y2 = (-W[0] * x2 - W[2]) / W[1];
        g.setColor(Color.black);
        g.drawLine((int) (x1 * largo), (int) (y1 * alto), (int) (x2 * largo), (int) (y2 * alto));

    }

    private void inicializaWyPuntos() {
        W[0] = 1;
        W[1] = -1;

        int alto = jPanel1.getHeight();
        int largo = jPanel1.getWidth();

        int r = 5;

        // genero la linea divisoria
        double x1 = rnd.nextDouble();//*alto;
        double x2 = rnd.nextDouble();//*(largo);
        double y1 = rnd.nextDouble();//*(alto);
        double y2 = rnd.nextDouble();//*(largo);
        m = (double) (y1 - y2) / (x1 - x2);
        n = y1 - m * x1;

        //se generan los puntos
        for (int i = 0; i < cantidad_puntos; i++) {
            puntos[i][0] = rnd.nextDouble();   //rnd.nextInt(largo);
            puntos[i][1] = rnd.nextDouble();   //rnd.nextInt(alto);
            // dibujando los puntos
            if (puntos[i][1] - m * puntos[i][0] - n > 0) {
                clases[i] = 1;
            } else {
                clases[i] = 0;
            }

        }

        //m = (-W[0]  )/W[1];
        // n = ( - W[2])/W[1];
    }
}
